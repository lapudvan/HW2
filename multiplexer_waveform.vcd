$date
	Thu Sep 20 17:08:37 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module behavioralMultiplexer $end
$var wire 1 ! address0 $end
$var wire 1 " address1 $end
$var wire 1 # in0 $end
$var wire 1 $ in1 $end
$var wire 1 % in2 $end
$var wire 1 & in3 $end
$var wire 1 ' out $end
$var wire 4 ( inputs [3:0] $end
$var wire 2 ) address [1:0] $end
$upscope $end
$scope module testMultiplexer $end
$var wire 1 * out $end
$var reg 1 + addr0 $end
$var reg 1 , addr1 $end
$var reg 1 - in0 $end
$var reg 1 . in1 $end
$var reg 1 / in2 $end
$var reg 1 0 in3 $end
$scope module multiplexer $end
$var wire 1 1 add0add1 $end
$var wire 1 2 add0add13 $end
$var wire 1 3 add0nadd1 $end
$var wire 1 4 add0nadd11 $end
$var wire 1 + address0 $end
$var wire 1 , address1 $end
$var wire 1 - in0 $end
$var wire 1 . in1 $end
$var wire 1 5 in1orin0 $end
$var wire 1 / in2 $end
$var wire 1 0 in3 $end
$var wire 1 6 in3orin2 $end
$var wire 1 7 nadd0 $end
$var wire 1 8 nadd0add1 $end
$var wire 1 9 nadd0add12 $end
$var wire 1 : nadd0nadd1 $end
$var wire 1 ; nadd0nadd10 $end
$var wire 1 < nadd1 $end
$var wire 1 * out $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
00
0/
0.
0-
0,
0+
x*
bz )
bz (
x'
z&
z%
z$
z#
z"
z!
$end
#50000
1<
17
0;
04
09
02
03
08
01
#100000
1:
05
06
#150000
0*
#1000000
1-
#1050000
1;
#1100000
15
#1150000
1*
#2000000
0-
1+
#2050000
0;
07
13
#2100000
05
0:
#2150000
0*
#3000000
1.
#3050000
14
#3100000
15
#3150000
1*
#4000000
0.
1,
0+
#4050000
04
0<
17
03
#4100000
05
18
#4150000
0*
#5000000
1/
#5050000
19
#5100000
16
#5150000
1*
#6000000
0/
1+
#6050000
09
07
11
#6100000
06
08
#6150000
0*
#7000000
10
#7050000
12
#7100000
16
#7150000
1*
#8000000
